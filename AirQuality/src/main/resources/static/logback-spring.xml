<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 此xml在spring-boot-1.5.3.RELEASE.jar里 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />
    <!-- 开启后可以通过jmx动态控制日志级别(springboot Admin的功能) -->
    <!--<jmxConfigurator/>-->

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--<File>/home/hfw-client/hfw_log/stdout.log</File>-->
        <File>D:/log/hfw-client/hfw_log/stdout.log</File>
        <encoder>
            <pattern>%date [%level] [%thread] %logger{60} [%file : %line] %msg%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 添加.gz 历史日志会启用压缩 大大缩小日志文件所占空间 -->
            <!--<fileNamePattern>/home/hfw-client/hfw_log/stdout.log.%d{yyyy-MM-dd}.log</fileNamePattern>-->
            <fileNamePattern>D:/log/hfw-client/hfw_log/stdout.log.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory><!--  保留30天日志 -->
        </rollingPolicy>
    </appender>
    <!-- 设置包打印日志级别
        <logger name= "com.jinhaoxun.acapply.dao.applyMapper" level="TRACE" /> 此处name是扫描需要打印sql语句的mapper包，可配置多个，而level则是打印日志的级别。
        级别分为：TRACE < DEBUG < INFO < WARN < ERROR < FATAL
    -->
    <logger name= "com.jinhaoxun.acapply.dao.applyMapper" level="TRACE" />

    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>

    <!--
        第四步，直接在需要打印日志的类上添加 @Slf4j 注解去声明式注解日志对象，然后就直接可以使用了
        log.后面的方法名代表打印级别，包括log.trace()，log.debug()，log.info()，log.warn()，log.error()等方法
    -->
</configuration>